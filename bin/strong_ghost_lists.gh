#ifndef STRONG_GHOST_LISTS_H
#define STRONG_GHOST_LISTS_H

predicate strong_ghost_list<t>(int id, list<t> xs);
predicate strong_ghost_list_member_handle<t>(int id, t x);

lemma int create_strong_ghost_list<t>();
    requires true;
    ensures strong_ghost_list<t>(result, nil);

lemma void strong_ghost_list_member_handle_lemma<t>();
    requires strong_ghost_list<t>(?id, ?xs) &*& strong_ghost_list_member_handle<t>(id, ?x);
    ensures strong_ghost_list<t>(id, xs) &*& strong_ghost_list_member_handle<t>(id, x) &*& mem(x, xs) == true;

lemma void strong_ghost_list_insert<t>(int id, list<t> xs0, list<t> xs1, t x);
    requires strong_ghost_list<t>(id, append(xs0, xs1));
    ensures strong_ghost_list<t>(id, append(xs0, cons(x, xs1))) &*& strong_ghost_list_member_handle<t>(id, x);

lemma void strong_ghost_list_remove<t>(int id, list<t> xs0, list<t> xs1, t x);
    requires strong_ghost_list<t>(id, append(xs0, cons(x, xs1))) &*& strong_ghost_list_member_handle<t>(id, x);
    ensures strong_ghost_list<t>(id, append(xs0, xs1));

#endif
